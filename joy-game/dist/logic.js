const c=e=>Object.values(e.diceCount).some(t=>t<=0),i=e=>Object.entries(e.diceCount).reduce((t,[n,o])=>{const r=o<=0?"WON":"LOST";return t[n]=r,t},{}),s=(e,t)=>{let n=0;for(let o=0;o<e.length;o++)e[o]===t&&(n+=1);return console.log("Number of occurances of ",t,": ",n),n};Rune.initLogic({minPlayers:1,maxPlayers:4,setup:e=>{const t=Object.fromEntries(e.map(o=>[o,5]));return{gameDice:Array.from({length:5},()=>Math.floor(Math.random()*6)+1),diceCount:t,currentPlayerIndex:0,gameOver:!1}},actions:{updateDiceCount:({playerId:e,amount:t},{game:n})=>{if(n.diceCount[e]===void 0)throw Rune.invalidAction();console.log("updating dice count:",e,t),n.diceCount[e]+=t;const o=c(n);console.log("Is game over? ",o),o&&Rune.gameOver({players:i(n)})},rollDice:({nextIndex:e,numDice:t},{game:n})=>{n.gameDice=Array.from({length:t},()=>Math.floor(Math.random()*6)+1);const o=s(n.gameDice,5);console.log("num fives",o),n.gameOver||(n.currentPlayerIndex=e)},nextPlayer:({nextIndex:e},{game:t})=>{t.currentPlayerIndex=e}},events:{playerJoined:(e,{game:t})=>{t.diceCount[e]=5},playerLeft(e,{game:t}){delete t.diceCount[e]}}});
